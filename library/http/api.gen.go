// Package http provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package http

import (
	"fmt"
	"net/url"

	"github.com/gofiber/fiber/v2"
	"github.com/oapi-codegen/runtime"
)

// GetBooksParams defines parameters for GetBooks.
type GetBooksParams struct {
	Page        *int    `form:"page,omitempty" json:"page,omitempty"`
	Limit       *int    `form:"limit,omitempty" json:"limit,omitempty"`
	FilterBy    *string `form:"filter_by,omitempty" json:"filter_by,omitempty"`
	FilterValue *string `form:"filter_value,omitempty" json:"filter_value,omitempty"`
	Sort        *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create book
	// (POST /book)
	CreateBook(c *fiber.Ctx) error
	// Update book
	// (PUT /book)
	UpdateBook(c *fiber.Ctx) error
	// Update book status
	// (PUT /book/status)
	UpdateBookStatus(c *fiber.Ctx) error
	// Delete book
	// (DELETE /book/{id})
	DeleteBook(c *fiber.Ctx, id string) error
	// Get book detail
	// (GET /book/{id})
	GetBookDetail(c *fiber.Ctx, id string) error
	// Get books
	// (GET /books)
	GetBooks(c *fiber.Ctx, params GetBooksParams) error
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

type MiddlewareFunc fiber.Handler

// CreateBook operation middleware
func (siw *ServerInterfaceWrapper) CreateBook(c *fiber.Ctx) error {

	return siw.Handler.CreateBook(c)
}

// UpdateBook operation middleware
func (siw *ServerInterfaceWrapper) UpdateBook(c *fiber.Ctx) error {

	return siw.Handler.UpdateBook(c)
}

// UpdateBookStatus operation middleware
func (siw *ServerInterfaceWrapper) UpdateBookStatus(c *fiber.Ctx) error {

	return siw.Handler.UpdateBookStatus(c)
}

// DeleteBook operation middleware
func (siw *ServerInterfaceWrapper) DeleteBook(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Params("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	return siw.Handler.DeleteBook(c, id)
}

// GetBookDetail operation middleware
func (siw *ServerInterfaceWrapper) GetBookDetail(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Params("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	return siw.Handler.GetBookDetail(c, id)
}

// GetBooks operation middleware
func (siw *ServerInterfaceWrapper) GetBooks(c *fiber.Ctx) error {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBooksParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", query, &params.Page)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter page: %w", err).Error())
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", query, &params.Limit)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter limit: %w", err).Error())
	}

	// ------------- Optional query parameter "filter_by" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter_by", query, &params.FilterBy)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter filter_by: %w", err).Error())
	}

	// ------------- Optional query parameter "filter_value" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter_value", query, &params.FilterValue)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter filter_value: %w", err).Error())
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", query, &params.Sort)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter sort: %w", err).Error())
	}

	return siw.Handler.GetBooks(c, params)
}

// FiberServerOptions provides options for the Fiber server.
type FiberServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router fiber.Router, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, FiberServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router fiber.Router, si ServerInterface, options FiberServerOptions) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	for _, m := range options.Middlewares {
		router.Use(fiber.Handler(m))
	}

	router.Post(options.BaseURL+"/book", wrapper.CreateBook)

	router.Put(options.BaseURL+"/book", wrapper.UpdateBook)

	router.Put(options.BaseURL+"/book/status", wrapper.UpdateBookStatus)

	router.Delete(options.BaseURL+"/book/:id", wrapper.DeleteBook)

	router.Get(options.BaseURL+"/book/:id", wrapper.GetBookDetail)

	router.Get(options.BaseURL+"/books", wrapper.GetBooks)

}
